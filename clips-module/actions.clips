; Globals
(defglobal
    ?*result* = -1)

; Adjacency template
(deftemplate adjacent
    (slot one)
    (slot two))

(deftemplate free-armies
    (slot player)
    (slot num))

(deftemplate armies
    (slot country)
    (slot num))

(deftemplate controls
    (slot country)
    (slot player))

(deftemplate phase
    (slot current))

(deffacts risk
    ; Alaska
    (adjacent (one Alaska) (two NorthwestTerritory))
    (adjacent (one Alaska) (two Alberta))

    ; Northwest Territory
    (adjacent (one NorthwestTerritory) (two Alaska))
    (adjacent (one NorthwestTerritory) (two Alberta))
    (adjacent (one NorthwestTerritory) (two Ontario))
    (adjacent (one NorthwestTerritory) (two Greenland))

    ; Greenland
    (adjacent (one Greenland) (two NorthwestTerritory))
    (adjacent (one Greenland) (two Ontario))
    (adjacent (one Greenland) (two Quebec))
  
    ; Alberta
    (adjacent (one Alberta) (two Alaska))
    (adjacent (one Alberta) (two NorthwestTerritory))
    (adjacent (one Alberta) (two Ontario))
    (adjacent (one Alberta) (two WesternUnitedStates))
  
    ; Ontario
    (adjacent (one Ontario) (two NorthwestTerritory))
    (adjacent (one Ontario) (two Greenland))
    (adjacent (one Ontario) (two Alberta))
    (adjacent (one Ontario) (two Quebec))
    (adjacent (one Ontario) (two WesternUnitedStates))
    (adjacent (one Ontario) (two EasternUnitedStates))
  
    ; Western United States
    (adjacent (one WesternUnitedStates) (two Alberta))
    (adjacent (one WesternUnitedStates) (two Ontario))
    (adjacent (one WesternUnitedStates) (two EasternUnitedStates))
    (adjacent (one WesternUnitedStates) (two CentralAmerica))
  
    ; Eastern United States
    (adjacent (one EasternUnitedStates) (two Ontario))
    (adjacent (one EasternUnitedStates) (two Quebec))
    (adjacent (one EasternUnitedStates) (two WesternUnitedStates))
    (adjacent (one EasternUnitedStates) (two CentralAmerica))
  
    ; Central America
    (adjacent (one CentralAmerica) (two WesternUnitedStates))
    (adjacent (one CentralAmerica) (two EasternUnitedStates))
    (adjacent (one CentralAmerica) (two Venezuela))
  
    ; Venezuela
    (adjacent (one Venezuela) (two CentralAmerica))
    (adjacent (one Venezuela) (two Peru))
    (adjacent (one Venezuela) (two Brazil))
  
    ; Peru
    (adjacent (one Peru) (two Venezuela))
    (adjacent (one Peru) (two Brazil))
    (adjacent (one Peru) (two Argentina))
  
    ; Brazil
    (adjacent (one Brazil) (two Venezuela))
    (adjacent (one Brazil) (two Peru))
    (adjacent (one Brazil) (two Argentina))
  
    ; Argentina
    (adjacent (one Argentina) (two Peru))
    (adjacent (one Argentina) (two Brazil)))


; 
(deffunction rolls (?a ?d)
    (bind ?a-rolls (if (< ?a 3)
                    then 1
                    else (if (< ?a 4)
                         then 2 else 3)))

    (bind ?b-rolls (if (< ?d 2)
                    then 1
                    else 2))

    (bind ?rolls (min ?d (- ?a 1) 2))

    ?rolls)

(deffunction a-wins (?rolls)
    (bind ?a 0)
    (loop-for-count ?rolls
        (if (> (random 0 1) 0)
        then (bind ?a (+ ?a 1))))

    ?a)

(deffunction floor (?num)
    (printout t "Floor: " (integer (/ ?num 2)) crlf)
    (integer (/ ?num 2)))

(deffunction ceiling (?num)
    (if (< (integer (/ ?num 2)) (/ ?num 2))
        then
            (printout t "Ceiling: " (+ (integer (/ ?num 2)) 1) crlf)
            (+ (integer (/ ?num 2)) 1)
        else
            (printout t "Ceiling: " (integer (/ ?num 2)) crlf)
            (integer (/ ?num 2))))

(deffunction calc-result (?starting-player)
    (bind ?inc-0 0)
    (bind ?inc-1 0)
    (do-for-all-facts
        ((?c controls))
        (eq ?c:player ?starting-player)
        (bind ?inc-1 (+ ?inc-1 1)))

    (do-for-all-facts
        ((?c controls))
        (not (eq ?c:player ?starting-player))
        (bind ?inc-1 (+ ?inc-1 1)))

    (if (> ?inc-0 ?inc-1)
        then 1
        else 0))

(defrule out-of-time
    (declare (salience 9999))
    (steps 0)
    (starting-player ?starting-player)
    =>
    (bind ?*result* (calc-result ?starting-player))
    (printout t "--- Ran out of time: " ?*result* crlf)
    (halt))

(defrule game-over
    (declare (salience 10000))
    (controls (country ?) (player ?p))
    (starting-player ?starting-player)
    (not (controls (country ?) (player ?p-2&:(not (= ?p-2 ?p)))))
    =>
    (if (= ?p ?starting-player)
        then (bind ?*result* 1)
        else (bind ?*result* 0))
    (printout t "--- Game Over: " ?*result* crlf)
    (halt))

(defrule start-place
    (declare (salience 10))
    
    ?turn-fact <- (turn ?player)
    ?phase-fact <- (phase (current start))
    ?free-armies-fact <- (free-armies (player ?player) (num ?free))
    (controls (country ?country) (player ?player))
    ?armies-fact <- (armies (country ?country) (num ?armies))
    (players ?num)
    =>
    (retract ?armies-fact)
    (assert (armies (country ?country) (num (+ ?armies 1))))
    (retract ?turn-fact)
    (assert (turn (mod (+ ?player 1) ?num)))
    (retract ?free-armies-fact)
    (assert (free-armies (player ?player) (num (- ?free 1)))))

(defrule end-start-place
    ?phase-fact <- (phase (current start))
    (not (free-armies (player ?) (num ?free&:(> ?free 0))))
    =>
    (retract ?phase-fact)
    (assert (phase (current placement))))

(defrule place-army
    (declare (salience 10))
    (turn ?player)
    ?phase-fact <- (phase (current placement))
    (controls (country ?country) (player ?player))
    ?armies-fact <- (armies (country ?country) (num ?armies))
    ?free-armies-fact <- (free-armies (player ?player) (num ?free))
    =>
    (retract ?armies-fact)
    (assert (armies (country ?country) (num (+ ?armies 1))))
    (retract ?free-armies-fact)
    (assert (free-armies (player ?player) (num (- ?free 1))))
    (if (< (- ?free 1) 1) then
        (retract ?phase-fact)
        (assert (phase (current attack))))
    (printout t "Action: Player " ?player " placed 1 army on " ?country crlf))

(defrule attack-all
    (declare (salience 10))
    (turn ?a-player)
    ?phase-fact <- (phase (current attack))
    (controls (country ?a-country) (player ?a-player))
    ?a-army-fact <- (armies (country ?a-country) (num ?a-army&:(> ?a-army 1)))
    (adjacent (one ?a-country) (two ?d-country))
    ?d-controls-fact <- (controls (country ?d-country) (player ?d-player&:(not (= ?a-player ?d-player))))
    ?d-army-fact <- (armies (country ?d-country) (num ?d-army))
    =>
    (bind ?roll-count (rolls ?a-army ?d-army))
    (bind ?a (a-wins ?roll-count))
    (bind ?d (- ?roll-count ?a))

    (retract ?a-army-fact)
    (assert (armies (country ?a-country) (num (- ?a-army ?d))))

    (if (>= ?a ?d-army)
        then
            (assert (won ?a-player ?a-country ?d-country))
            (retract ?phase-fact)
            (assert (phase (current won-country)))
        else
            (retract ?d-army-fact)
            (assert (armies (country ?d-country) (num (- ?d-army ?a)))))
            
    (printout t "Action: Player " ?a-player " attacked " ?d-player ":" ?d-country " from " ?a-country -- ?a-army "vs" ?d-army crlf))

(defrule attack-half
    (declare (salience 10))
    (turn ?a-player)
    ?phase-fact <- (phase (current attack))
    (controls (country ?a-country) (player ?a-player))
    ?a-army-fact <- (armies (country ?a-country) (num ?a-army&:(> ?a-army 6)))
    (adjacent (one ?a-country) (two ?d-country))
    ?d-controls-fact <- (controls (country ?d-country) (player ?d-player&:(not (= ?a-player ?d-player))))
    ?d-army-fact <- (armies (country ?d-country) (num ?d-army))
    =>
    (bind ?roll-count (rolls ?a-army ?d-army))
    (bind ?a (a-wins ?roll-count))
    (bind ?d (- ?roll-count ?a))

    (retract ?a-army-fact)
    (assert (armies (country ?a-country) (num (- ?a-army ?d))))

    (if (>= ?a ?d-army)
        then
            (assert (won ?a-player ?a-country ?d-country))
            (retract ?phase-fact)
            (assert (phase (current won-country)))
        else
            (retract ?d-army-fact)
            (assert (armies (country ?d-country) (num (- ?d-army ?a))))
            
    (printout t "Action: Player " ?a-player " attacked " ?d-player ":" ?d-country " from " ?a-country -- ?a-army "vs" ?d-army crlf)))

(defrule take-country-all
    (declare (salience 10))
    ?phase-fact <- (phase (current won-country))
    (won ?w-player ?w-country ?l-country)
    ?l-controls-fact <- (controls (country ?l-country) (player ?l-player))
    ?w-armies-fact <- (armies (country ?w-country) (num ?w-armies))
    ?l-armies-fact <- (armies (country ?l-country) (num ?l-armies))
    =>
    (retract ?l-armies-fact)
    (assert (armies (country ?l-country) (num (- ?w-armies 1))))
    (retract ?w-armies-fact)
    (assert (armies (country ?w-country) (num 1)))
    (retract ?l-controls-fact)
    (assert (controls (country ?l-country) (player ?w-player)))
    (retract ?phase-fact)
    (assert (phase (current attack)))
    (printout t ">> Player " ?w-player " captures " ?l-country " with all" crlf))

(defrule take-country-half
    (declare (salience 10))
    ?phase-fact <- (phase (current won-country))
    (won ?w-player ?w-country ?l-country)
    ?l-controls-fact <- (controls (country ?l-country) (player ?l-player))
    ?w-armies-fact <- (armies (country ?w-country) (num ?w-armies))
    ?l-armies-fact <- (armies (country ?l-country) (num ?l-armies))
    =>
    (retract ?l-armies-fact)
    (assert (armies (country ?l-country) (num (floor ?w-armies))))
    (retract ?w-armies-fact)
    (assert (armies (country ?w-country) (num (ceiling ?w-armies))))
    (retract ?l-controls-fact)
    (assert (controls (country ?l-country) (player ?w-player)))
    (retract ?phase-fact)
    (assert (phase (current attack)))
    (printout t ">> Player " ?w-player " captures " ?l-country " with half" crlf))

(defrule fortify-move
    (declare (salience 10))
    ?turn-fact <- (turn ?player)
    (players ?num)
    ?phase-fact <- (phase (current attack))
    (controls (country ?country-a) (player ?player-a))
    (controls (country ?country-b) (player ?player-b&:(= ?player-a ?player-b)))
    (adjacent (one ?country-a) (two ?country-b))
    ?armies-a-fact <- (armies (country ?country-a) (num ?a&:(> ?a 1)))
    ?armies-b-fact <- (armies (country ?country-b) (num ?b))
    =>
    (retract ?armies-a-fact)
    (assert (armies (country ?country-a) (num 1)))
    (retract ?armies-b-fact)
    (assert (armies (country ?country-b) (num (+ ?b (- ?a 1)))))
    (retract ?phase-fact)
    (assert (phase (current placement)))
    (assert (free-armies (player (mod (+ ?player 1) ?num)) (num 5))) ; -----------------------------TEMPORARY
    (retract ?turn-fact)
    (assert (turn (mod (+ ?player 1) ?num)))
    (printout t "Action: Player " ?player-a " fortified " ?country-b " from " ?country-a crlf)
    (printout t "Action: Player " ?player-a " ends turn" crlf))

(defrule next-turn
    (declare (salience 10))
    (players ?num)
    ?turn-fact <- (turn ?player)
    ?phase-fact <- (phase (current attack))
    =>
    (retract ?phase-fact)
    (assert (phase (current placement)))
    (assert (free-armies (player (mod (+ ?player 1) ?num)) (num 5))) ; -----------------------------TEMPORARY
    (retract ?turn-fact)
    (assert (turn (mod (+ ?player 1) ?num)))
    (printout t "Action: Player " ?player " ends turn" crlf))
