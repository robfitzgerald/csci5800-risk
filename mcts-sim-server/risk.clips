; Globals
(defglobal
    ?*result* = 0)

; Adjacency template
(deftemplate adjacent
    (slot one)
    (slot two))

(deftemplate armies
    (slot country)
    (slot num))

(deftemplate controls
    (slot country)
    (slot player))

(deftemplate phase
    (slot current))

(deffacts risk
    ; Alaska
    (adjacent (one Alaska) (two NorthwestTerritory))
    (adjacent (one Alaska) (two Alberta))

    ; Northwest Territory
    (adjacent (one NorthwestTerritory) (two Alaska))
    (adjacent (one NorthwestTerritory) (two Alberta))
    (adjacent (one NorthwestTerritory) (two Ontario))
    (adjacent (one NorthwestTerritory) (two Greenland))

    ; Greenland
    (adjacent (one Greenland) (two NorthwestTerritory))
    (adjacent (one Greenland) (two Ontario))
    (adjacent (one Greenland) (two Quebec))
  
    ; Alberta
    (adjacent (one Alberta) (two Alaska))
    (adjacent (one Alberta) (two NorthwestTerritory))
    (adjacent (one Alberta) (two Ontario))
    (adjacent (one Alberta) (two WesternUnitedStates))
  
    ; Ontario
    (adjacent (one Ontario) (two NorthwestTerritory))
    (adjacent (one Ontario) (two Greenland))
    (adjacent (one Ontario) (two Alberta))
    (adjacent (one Ontario) (two Quebec))
    (adjacent (one Ontario) (two WesternUnitedStates))
    (adjacent (one Ontario) (two EasternUnitedStates))
  
    ; Western United States
    (adjacent (one WesternUnitedStates) (two Alberta))
    (adjacent (one WesternUnitedStates) (two Ontario))
    (adjacent (one WesternUnitedStates) (two EasternUnitedStates))
    (adjacent (one WesternUnitedStates) (two CentralAmerica))
  
    ; Eastern United States
    (adjacent (one EasternUnitedStates) (two Ontario))
    (adjacent (one EasternUnitedStates) (two Quebec))
    (adjacent (one EasternUnitedStates) (two WesternUnitedStates))
    (adjacent (one EasternUnitedStates) (two CentralAmerica))
  
    ; Central America
    (adjacent (one CentralAmerica) (two WesternUnitedStates))
    (adjacent (one CentralAmerica) (two EasternUnitedStates))
    (adjacent (one CentralAmerica) (two Venezuela))
  
    ; Venezuela
    (adjacent (one Venezuela) (two CentralAmerica))
    (adjacent (one Venezuela) (two Peru))
    (adjacent (one Venezuela) (two Brazil))
  
    ; Peru
    (adjacent (one Peru) (two Venezuela))
    (adjacent (one Peru) (two Brazil))
    (adjacent (one Peru) (two Argentina))
  
    ; Brazil
    (adjacent (one Brazil) (two Venezuela))
    (adjacent (one Brazil) (two Peru))
    (adjacent (one Brazil) (two Argentina))
  
    ; Argentina
    (adjacent (one Argentina) (two Peru))
    (adjacent (one Argentina) (two Brazil)))


; 
(deffunction rolls (?a ?d)
    (bind ?a-rolls (if (< ?a 3)
                    then 1
                    else (if (< ?a 4)
                         then 2 else 3)))

    (bind ?b-rolls (if (< ?d 2)
                    then 1
                    else 2))

    (bind ?rolls (min ?d (- ?a 1) 2))

    ?rolls)

(deffunction a-wins (?rolls)
    (bind ?a 0)
    (loop-for-count ?rolls
        (if (> (random 0 1) 0)
        then (bind ?a (+ ?a 1))))

    ?a)

(defrule game-over
    (controls (country ?) (player ?p))
    (forall (controls (country ?) (player ?player))
        (test (= ?p ?player)))
    =>
    (if (= ?p 0)
        then (bind ?*result* 1)
        else (bind ?*result* -1))
    (halt))

(defrule next-turn
    (players ?num)
    ?turn-fact <- (turn ?player)
    ?phase-fact <- (phase (current attack)) ; -------------------TEMPORARY
    =>
    (retract ?phase-fact)
    (assert (phase (current placement)))
    (assert (free-armies 5)) ; -----------------------------TEMPORARY
    (retract ?turn-fact)
    (assert (turn (mod (+ ?player 1) ?num))))

(defrule place-army
    (turn ?player)
    ?phase-fact <- (phase (current placement))
    (controls (country ?country) (player ?player))
    ?armies-fact <- (armies (country ?country) (num ?armies))
    ?free-armies-fact <- (free-armies ?free)
    =>
    (retract ?armies-fact)
    (assert (armies (country ?country) (num (+ ?armies 1))))
    (retract ?free-armies-fact)
    (if (> (- ?free 1)0) 
        then
            (assert (free-armies (- ?free 1)))
        else
            (retract ?phase-fact)
            (assert (phase (current attack)))))

(defrule attack-all
    (turn ?a-player)
    (phase (current attack))
    (controls (country ?a-country) (player ?a-player))
    ?a-army-fact <- (armies (country ?a-country) (num ?a-army&:(> ?a-army 1)))
    (adjacent (one ?a-country) (two ?d-country))
    ?d-controls-fact <- (controls (country ?d-country) (player ?d-player&:(not (= ?a-player ?d-player))))
    ?d-army-fact <- (armies (country ?d-country) (num ?d-army))
    =>
    (bind ?roll-count (rolls ?a-army ?d-army))
    (bind ?a (a-wins ?roll-count))
    (bind ?d (- ?roll-count ?a))

    (if (>= ?a ?d-army)
        then
            (bind ?a-remaining (- ?a-army ?d))
            (retract ?d-army-fact)
            (assert (armies (country ?d-country) (num (- ?a-remaining 1))))
            (retract ?a-army-fact)
            (assert (armies (country ?a-country) (num 1)))
            (retract ?d-controls-fact)
            (assert (controls (country ?d-country) (player ?a-player)))
        else
            (retract ?d-army-fact)
            (assert (armies (country ?d-country) (num (- ?d-army ?a))))
            (retract ?a-army-fact)
            (assert (armies (country ?a-country) (num (- ?a-army ?d))))))



